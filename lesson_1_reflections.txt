How did viewing a diff between two versions of a file help you see the bug that was introduced?

	It removes the noise and quickly pinpoints the differences without me having to parse each line. 

How could having easy access to the entire history of a file make you a more efficient programmer in the long term?

	When things go through iterative changes, it is often the case that multiple backtracks are necessary. Having access to the exact changes is very useful in these cases. 

What do you think are the pros and cons of manually choosing when to create a commit, like you do in Git, vs having versions automatically saved, like Google Docs does?

	The main benefit is that the best judge of when a "logical change" has occured is the programmer. Like all tools, it is only as useful as how it is used; which gives benefit to random periodic changes. This would have to have some sort of smart way of thinking to avoid saves that would not compile or otherwise prove non-beneficial because these would simply add noise. 

Why do you think some version control systems, like Git, allow saving multiple files in one commit, while others, like Google Docs, treat each file separately?

	In google docs, the assumption is made that the files do nt depend on each other. In git, multiple files are needed to accomplish the end goal, so each file is saved together

How can you use the commands git log and git diff to view the history of files?

	git log shows each revision. git diff shows the differences between two revisions

How might using version control make you more confident to make changes that could break something?

	If I break something, it is alright. There is a working copy saved for me.

Now that you have your workspace set up, what do you want to try using Git for?

	saving stuff.